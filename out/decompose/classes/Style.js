import{ELEMENT,SHEET}from"../consts/symbols.js";export class Style{static get regex(){return{nesting:/(\s*§)([^{@§}]+)(§\s*{\s*)((?:[-\w]+:[^;]+;\s*)*)(§)([^{§}]+)(§\s*{\s*(?:[-\w]+:[^;]+;\s*)*})/,cleanup:/\s*§[^{§}]+§\s*{\s*}/g,queries:/(§[^{§@}]+§)(\s*{.*[^{§@}]*)(§@[^§@]+§)(\s*{)((?:\s*§[^{§}]*§\s*{(?:\s*[\w-]+:[^;]*;)*\s*})*)(\s*})/,markSelectors:/(^|;|{|})(?:\s*)([\w\-#.[\]="~>+:@&]+[@&\w\-#.,[\]="~>+ :]*[&\w\]*])(?:\s*)(?={)/g,unmarkSelectors:/§([^{§}]+)§/g,scope:/((?:^|})\s*)([^@&{,}]*)(?={|,)/,separate:/(^)(\s*[^{}]*{)((?:[^{}]*)|(?:[^{}]*{[^{}]*})*)(\s*})/}}static get normalize(){return e=>e.replaceAll(/\s+/g," ").replaceAll(/(\s*)(\{|\}|;)(\s*)/g,"$2 ").replaceAll("@nest","").replaceAll(Style.regex.markSelectors,"$1 §$2§")}static get oldReplaceNesting(){return(e,t,l,s,r,n)=>{let o=l.split(","),i=r.split(","),c=[];for(let e in o){let t=o[e];for(let e in i)c.push(i[e].replace("&",t))}return`${t}${c.join(",")} {${n}${l} {${s}`}}static get oldReplaceQueries(){return(e,t,l,s,r,n)=>{let o=t.split(","),i=r.split(","),c=[];for(let e in o){let t=o[e];for(let e in i)i[e].replace("&",t)!==c[c.length-1]&&c.push(i[e].replace("&",t))}return`${s}${c.join(",")} {${n}} ${t} {${l}`}}static get replaceQueries(){return"$3$4 $1 {$5$6 } $1$2"}static get replaceNesting(){return(e,t,l,s,r,n,o,i)=>{let c=l.replaceAll("§",""),a=o.replaceAll("§",""),p=c.split(","),g=a.split(","),$=[];for(let e in p){let t=p[e];for(let e in g)$.push(g[e].replace("&",t))}return`${t}${l}${s}${r}}${t}${$.join(",")}${i}${t}${l}${s}`}}constructor(){this[ELEMENT]=document.createElement("style"),this[ELEMENT].id="de-style",document.head.appendChild(this[ELEMENT]),this[SHEET]=this[ELEMENT].sheet}get insertRule(){return e=>(this[SHEET].insertRule(e),"")}insert(e){let t=Style.normalize(e),l=Date.now(),s=(e,l)=>{for(;t.match(e);)t=t.replace(e,l);return t=t.replaceAll(Style.regex.cleanup,""),t};s(Style.regex.nesting,Style.replaceNesting),console.log(t),t.includes("@")&&(s(Style.regex.queries,Style.replaceQueries),console.log(t),s(Style.regex.nesting,Style.replaceNesting),console.log(t)),t=t.replaceAll(Style.regex.unmarkSelectors,"$1"),console.log(t),s(Style.regex.separate,this.insertRule),console.log(t);let r=Date.now();return console.log(`stylesheet build time is ${(r-l)/100} s`),this}insertScoped(e,t){let l=t.replaceAll(/\s+/g," ");for(console.log(l);l.match(Style.regex.scope);)l=l.replace(Style.regex.scope,"$1& $2");return l=`${e} { ${l} }`,console.log(l),this.insert(l)}}