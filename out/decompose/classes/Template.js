import{APPLY_PROPS,RAWC,RAWO}from"../consts/symbols.js";import{PROXY}from"../consts/proxy.js";import{findJsVars,templateToFunc,literalParser}from"../funcs.js";import{gid}from"../globs.js";import{Style}from"./Style.js";var style=new Style;export class Template{constructor(e,t){this[RAWC]=Object.create(null),this[RAWO]=Object.create(null),this.callbacks=new Proxy(this[RAWC],PROXY.callbacks),this.observables=new Proxy(this[RAWO],PROXY.observables),this.properties={components:{}};let s=0;t.forEach(((r,i)=>{let o,l;switch(typeof r){case"string":o=[...e[i].matchAll(/<$/g)],l=[...e[i+1].matchAll(/^>/g)],o[0]&&l[0]?(gid.get(),this.properties[r]=`gid value="${gid.val}"></gid`,this.properties.components[r]=`gid[value="${gid.val}"]`):this.properties[r]="";break;case"function":this.properties[`cProp${s}`]=r();break;case"object":this.properties[`cProp${s}`]=r.$;break;default:this.properties[`cProp${s}`]=r,t[i]=`cProp${s}`,s+=1}})),console.log(this.properties),this.elements=[];let r=findJsVars(e);return r.names.forEach((e=>this.elements.push(e))),this[APPLY_PROPS]=templateToFunc(r.lines,t),console.log(r),this}get name(){return this.Name}setStyle(e){this.style=literalParser(e,`de-${this.Name}`),style.setStyle(this.style)}setName(e){return this.Name=e,customElements.define(`de-${this.Name}`,class extends HTMLElement{}),this.element=document.createElement(`de-${this.Name}`),this}setOnLoad(e){return this.onLoad=e,this}}