import{SHEET}from"./consts/symbols.js";export function withValue(e,l=!1){var t=withValue.$||(withValue.$={enumerable:l,writable:!1,configurable:!1,value:e});return t.value!==e&&(t.value=e),t}export function findJsVars(e){let l=e.join(""),t=[],r=[...l.matchAll(/(<[\w-]+[ ]*(?:[\w-]+(?:=".+")?)*[ ]+)(?:@)([\w$][\w$]*)(?:@)(?=[^>]*>)/g)],n=[];return console.log(r),r.forEach((e=>{n.push(e[2])})),e.forEach((e=>t.push(e.replaceAll(/(<[\w-]+[ ]*(?:[\w-]+(?:=".+")?)*[ ]+)(?:@)([\w$][\w$]*)(?:@)(?=[^>]*>)/g,'$1de-name="$2" ')))),{names:n,lines:t}}export function templateToFunc(e,l){return t=>{let r=e[0];return console.log(l),l.forEach(((l,n)=>{r+=t[l]?t[l]:"",r+=e[n+1]})),(new DOMParser).parseFromString(r,"text/html").body.firstChild}}export function ruleInserter(e,l){if(!e[l])if(7===e[SHEET].type){let t=e[SHEET].cssRules.length;e[SHEET].appendRule(l+" {}"),e[l]=e[SHEET].cssRules[t]}else{let t=e[SHEET].cssRules.length;e[SHEET].insertRule(l+" {}",t),e[l]=e[SHEET].cssRules[t]}}export function literalParser(e,l){let t=e.replaceAll(/^[ ]*([@].*[^ ":])[ ]*({)$/gm,'"$1": $2').replaceAll(/^[ ]*([&].*[^ ":])[ ]*({)$/gm,'"$1": $2').replaceAll(/^[ ]*([^&}@]?.*[^ ":])[ ]*({)$/gm,'"$1": $2').replaceAll(/^[ ]*([-=a-zA-Z ]+):[ ]*(.+)[ ]*$/gm,'"$1": "$2",').replaceAll(/^[ ]*(})[ ]*$/gm,"$1,").replaceAll(/,[ ]*\n[ ]*\}/g,"\n}").replaceAll(/,[ ]*$/g,"");console.log(t);let r=JSON.parse(`{${t}}`);function n(e,l,t){Object.entries(e).forEach((([r,o])=>{if("object"==typeof o&&r.startsWith("&")){let a=r.replace(/^&/,"");l[t+a]=o,Object.entries(o).forEach((([e,r])=>{"object"==typeof r&&e.startsWith("&")&&n(l[t+a],l,t+a)})),delete e[r]}}))}return Object.entries(r).forEach((([e,t])=>{if("object"==typeof t){let o=`${l} > ${e}`;r[o]=t,delete r[e],n(r[o],r,o)}})),r}export function detachedCallback(e){let l=l=>e(l);return l.id=Symbol(),l}